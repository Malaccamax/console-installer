#!/bin/bash

_ask_user_informations() {

    # User Language
    until grep -Fxq "${language}" ./conf/language; do
        _note "list of available language code is available in the wiki"
        _prompt "Enter language code:" "(ex: fr_FR, en_US, de_DE)"
        read -r language
    done
    keymap_code=$(echo ${language} | cut -d'_' -f 1)

    # TimeZone
    until grep -Fxq "${timezone}" ./conf/timezone; do
        _note "list of available time zone code is available in the wiki"
        _prompt "Enter time zone code:" "(ex: Europe/Paris, Asia/Tokyo)"
        read -r timezone
    done

    # Hostname
    until [[ ${#HOST_name} -ge 3 \
    && ${HOST_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
        _prompt "Enter hostname:" "(ex: my-favorite-computer)"
        read -r HOST_name
    done
	_note "Set hostname as ${HOST_name}"

    # Root Password
    if ! [[ ${#ROOT_passwd} -ge 8 && "${ROOT_passwd}" == *[a-z]* && "${ROOT_passwd}" == *[0-9]* ]]; then
		until [[ ${#a} -ge 8 && "${a}" == *[a-z]* && "${a}" == *[0-9]* ]]; do
			_note \
				"password should be at least 8 chars long with 1 letter and 1 digit"
			_prompt "Enter password for root:"
			read -rs a
		done
		echo

		# Confirm Root Password
		_prompt "Confirm password for root:"
		read -rs ROOT_passwd
		if [[ ${ROOT_passwd} != "${a}" ]]; then
			_error "passwords does not match!"
		fi
	else
		_note "Root password set by preseed."
	fi

    echo

    # Username
    until [[ ${#USER_name} -ge 3 \
    && ${USER_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
        _prompt "Enter username:" "(ex: johnny)"
        read -r USER_name
    done

    # User Password
    if ! [[ ${#USER_passwd} -ge 8 && "${USER_passwd}" == *[a-z]* && "${USER_passwd}" == *[0-9]* ]]; then
		until [[ ${#b} -ge 8 && "${b}" == *[a-z]* && "${b}" == *[0-9]* ]]; do
			_note \
				"password should be at least 8 chars long with 1 letter and 1 digit"
			_prompt "Enter password for user ${USER_name}:"
			read -rs b
		done

		echo

		# Confirm User Password
		_prompt "Confirm password for user ${USER_name}:"
		read -rs USER_passwd
		if [[ ${USER_passwd} != "${b}" ]]; then
			_error "passwords does not match!"
		fi
	else
		_note "User password set by preseed."
	fi
	echo

    # User Rights
	if [ -z ${power} ];then
		_confirm "Give all rights to user ${USER_name}?"
		case ${confirm} in y|Y) export power="yes";; esac
		unset confirm
	fi

    # Export required vars
    export language; export keymap_code; export timezone
    export HOST_name; export ROOT_passwd; export USER_name; export USER_passwd
}
